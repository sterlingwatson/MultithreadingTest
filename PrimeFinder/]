import time
import multiprocessing
import math

is_prime_flag = False

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

n = 7
number_of_threads = 2
results = multiprocessing.Manager().list()

def check_for_prime_in_range(start, end, check):
    for n in range(start, end):
        if is_prime(n):
            check.append(n)


with open("Times.txt", "a") as file:
    for i in range(1):
        start_time = time.time()
        
        for j in range(number_of_threads):
            start = i * ((n/math.floor(n/number_of_threads)))
            end = (i+1) * (n/math.floor(n/number_of_threads))
        process = multiprocessing.Process(target = check_for_prime_in_range, args (start, end, check))
        process.start()

    #wait for children to die
    for p in multiprocessing.active_children():
        process.join()

    answers = []
    for numbers in results:
        answers.extend(numbers)
       
    if n in answers:
            print(f"{n} is a prime number")
    else:
            print(f"{n} is not a prime number")
            
    time_taken = time.time() - start_time
    print(f"Time: {time_taken:.2f} seconds")
    file.write(f"Run {i+1}, {time_taken:.2f} seconds, Version 2 with 1 Processor and 2 threads\n")

file.close()

